What the URI structure may be:

/admin				-	Site admin
/user				-	User admin interface (logged in). Signup interface (logged out)\Collection of random user albums
/[join|signup]			-	Signup interface
/user/:username			-	List of (public) albums / admin interface
    	       /:album		-	Images that form this album / Album admin interface (public/private/delete/rename). User defined, rather than generated
	              /:image	-	Image / Image admimn interface (public/private/delete/rename). User defined, rather than generated
/i/:id				-	Direct link to image. Static. You can rename :image without creating a new :id. :id cannot be changed
[/i]/r/<size>/:id		-	Resized image using nginx's embedded perl resize module: http://wiki.nginx.org/EmbeddedPerlImageResize
		     		- OR -
[/i]/r/:id/<size>		-	Resized image using nginx's embedded perl resize module: http://wiki.nginx.org/EmbeddedPerlImageResize. This is probably prefered
/login				-	GET login page, POST login details
/logout				-	POST to logout
/upload				-	POST new images

http://www.example.org/admin
http://www.example.org/user
http://www.example.org/signup
http://www.example.org/user/testuser
http://www.example.org/user/testuser/testalbum
http://www.example.org/user/testuser/testalbum/DSC_0001.jpg
http://www.example.org/i/8c0ba84
http://www.example.org/r/8c0ba84/100x100
http://www.example.org/login
http://www.example.org/logout
http://www.example.org/upload

Prototype with _lite, expand with inflated app?
Initially use sqlite backend?
How to generate unique ID's, of a fixed (defainable) length
